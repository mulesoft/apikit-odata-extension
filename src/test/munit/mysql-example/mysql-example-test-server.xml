<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/mule-apikit" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/mule-apikit http://www.mulesoft.org/schema/mule/mule-apikit/current/mule-apikit.xsd 
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd">

    <apikit:config name="mysql-example-api-config" raml="munit/mysql-example-api.raml" outboundHeadersMapName="outboundHeaders" httpStatusVarName="httpStatus" />
    <db:config name="Database_Config" doc:name="Database Config">
		<db:my-sql-connection host="localhost" port="${DATABASE_PORT}" user="root" password="mysql" database="apikit-odata-example" />
	</db:config>
	<flow name="mysql-example-api-main">
        <http:listener config-ref="http-listener-simple" path="/api/*">
            <http:response statusCode="#[vars.httpStatus default 200]">
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:response>
            <http:error-response statusCode="#[vars.httpStatus default 500]">
                <http:body>#[payload]</http:body>
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:error-response>
        </http:listener>
        <apikit:router config-ref="mysql-example-api-config" />
        <error-handler>
            <on-error-propagate type="APIKIT:BAD_REQUEST">
                <ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Bad request"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">400</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_FOUND">
                <ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Resource not found"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus"><![CDATA[404]]></ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:METHOD_NOT_ALLOWED">
                <ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Method not allowed"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">405</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_ACCEPTABLE">
                <ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Not acceptable"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">406</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:UNSUPPORTED_MEDIA_TYPE">
                <ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Unsupported media type"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">415</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_IMPLEMENTED">
                <ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Not Implemented"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">501</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
        </error-handler>
    </flow>
    <flow name="put:\customers\(CustomerID):application\json:mysql-example-api-config">
        <set-variable value="#[payload.CustomerID]" doc:name="Set CustomerID" variableName="id" />
		<ee:transform doc:name="Build Query" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
// This DataWeave generates a MySQL Update Query from your metadata for a particular entity

// APIkit Odata Service creates a variable that contains the table's name 
var remoteEntityName = vars.odata.remoteEntityName match {
	case remoteEntityName is String -> remoteEntityName
	else -> ""	
}


var id = attributes.uriParams.CustomerID match {
	case id is String -> id
	else -> ""	
}


// Transform your payload (myKey1: myValue1, myKey2: myValue2) into something like myKey1 = 'myValue1', myKey2 = 'myValue2'
var sqlValues = (payload mapObject ((value, key) -> '$key': "$key = '$value'")) pluck ((value, key, index) -> value ) joinBy  ","
---
"UPDATE $remoteEntityName SET $sqlValues WHERE CustomerID = '$id'"]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" message="SQL Query: #[payload]" doc:name="Log Query"/>
		<db:update doc:name="Update" config-ref="Database_Config">
			<db:sql >#[payload]</db:sql>
		</db:update>
		<choice doc:name="Check Response" >
			<when expression="#[payload.affectedRows == 0]" >
				<set-variable value="404" doc:name="Set HTTP Status" variableName="httpStatus" />
				<set-payload value='{ "message": "Resource not found" }' doc:name="Set Payload" mimeType="application/json" />
			</when>
			<otherwise>
				<set-variable value="204" doc:name="Set HTTP Status" variableName="httpStatus" />
				<ee:transform doc:name="Set Payload">
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
null]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
    </flow>
    <flow name="put:\orders\OrderID_(OrderID)-ShipName_(ShipName):application\json:mysql-example-api-config">
		<ee:transform doc:name="Build Query">
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
// This DataWeave generates a MySQL Update Query from your metadata for a particular entity

// APIkit Odata Service creates a variable that contains the table's name 
var remoteEntityName = vars.odata.remoteEntityName match {
	case remoteEntityName is String -> remoteEntityName
	else -> ""	
}


var ShipName = attributes.uriParams.ShipName match {
	case ShipName is String -> ShipName
	else -> ""	
}

var OrderID = attributes.uriParams.OrderID match {
	case OrderID is String -> OrderID
	else -> ""	
}



// Transform your payload (myKey1: myValue1, myKey2: myValue2) into something like myKey1 = 'myValue1', myKey2 = 'myValue2'
var sqlValues = (payload mapObject ((value, key) -> '$key': "$key = '$value'")) pluck ((value, key, index) -> value ) joinBy  ","
---
"UPDATE $remoteEntityName SET $sqlValues WHERE OrderID = '$OrderID' and ShipName = '$ShipName'"
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Log Query" message="SQL Query: #[payload]" />
		<db:update doc:name="Update" config-ref="Database_Config" >
			<db:sql >#[payload]</db:sql>
		</db:update>
		<choice doc:name="Check Response">
			<when expression="#[payload.affectedRows == 0]" >
				<set-variable value="404" doc:name="Set HTTP Status" variableName="httpStatus" />
				<set-payload value='{ "message": "Resource not found" }' doc:name="Set Payload" mimeType="application/json" />
			</when>
			<otherwise >
				<set-variable value="204" doc:name="Set HTTP Status" variableName="httpStatus" />
				<ee:transform doc:name="Set Payload">
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
null]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
    </flow>
    <flow name="delete:\customers\(CustomerID):mysql-example-api-config">
		<ee:transform doc:name="Build Query" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
// This DataWeave generates a MySQL Delete Query from your metadata


// APIkit Odata Service creates a variable that contains the table's name 
var remoteEntityName = vars.odata.remoteEntityName match {
	case remoteEntityName is String -> remoteEntityName
	else -> ""	
}

var id = attributes.uriParams.CustomerID match {
	case id is String -> id
	else -> ""	
}


---
"DELETE FROM $remoteEntityName WHERE CustomerID = '$id'" 
 


]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<db:delete doc:name="Delete" config-ref="Database_Config">
			<db:sql >#[payload]</db:sql>
		</db:delete>
		<choice doc:name="Check Response " >
			<when expression="#[payload == 0]" >
				<set-variable value="404" doc:name="Set HTTP Satus" variableName="httpStatus" />
				<set-payload value='{ "message": "Resource not found" }' doc:name="Set Payload" mimeType="application/json" />
			</when>
			<otherwise >
				<set-payload value="#[null]" doc:name="Set Payload" />
			</otherwise>
		</choice>
    </flow>
    <flow name="delete:\orders\OrderID_(OrderID)-ShipName_(ShipName):mysql-example-api-config">
		<ee:transform doc:name="Build Query" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
// This DataWeave generates a MySQL Delete Query from your metadata


// APIkit Odata Service creates a variable that contains the table's name 
var remoteEntityName = vars.odata.remoteEntityName match {
	case remoteEntityName is String -> remoteEntityName
	else -> ""	
}


var ShipName = attributes.uriParams.ShipName match {
	case ShipName is String -> ShipName
	else -> ""	
}

var OrderID = attributes.uriParams.OrderID match {
	case OrderID is String -> OrderID
	else -> ""	
}


---
"DELETE FROM $remoteEntityName WHERE  OrderID = '$OrderID' and ShipName = '$ShipName'" 
 


]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<db:delete doc:name="Delete" config-ref="Database_Config" >
			<db:sql >#[payload]</db:sql>
		</db:delete>
		<choice doc:name="Check Response" >
			<when expression="#[payload == 0]" >
				<set-variable value="404" doc:name="Set HTTP Status" variableName="httpStatus" />
				<set-payload value='{ "message": "Resource not found" }' doc:name="Set Payload" mimeType="application/json" />
			</when>
			<otherwise >
				<set-payload value="#[null]" doc:name="Set Payload" />
			</otherwise>
		</choice>
    </flow>
    <flow name="get:\customers\(CustomerID):mysql-example-api-config">
        <ee:transform doc:name="Build Query" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java


// APIkit Odata Service creates a variable that contains the fields of your entity. It's a list of string (List<String>)
var entityFields : Array<String> = vars.odata.fields match {
	case fields is Array<String> -> fields
	else -> []
}


// APIkit Odata Service creates a variable that contains the keys of your entity
var keys : String = vars.odata.keyNames match {
	case keyNames is String -> keyNames
	else -> ""
}

// APIkit Odata Service creates a variable that contains the table's name 
var remoteEntityName = vars.odata.remoteEntityName match {
	case remoteEntityName is String -> remoteEntityName
	else -> ""	
}


// APIkit Odata Service puts your oData filters into the queryParams
var filters = attributes.queryParams

var select : String = filters.select match {
	case select is String -> select
	else -> ""
}

var id = attributes.uriParams.CustomerID match {
	case id is String -> id
	else -> ""	
}

// Generate the fields you need in the query. 
// It checks for a select function in case you need less filters that you're actually exposing. 
// If there is no select present, it just returns your fields defined in your metadata
var generateSqlFields = (select) -> ((if (select != "" )( (select splitBy ",") -- (keys splitBy ",") ++ (keys splitBy ",")) else entityFields)  map "`$`" ) joinBy ", "
---

"SELECT " ++ generateSqlFields(select) ++ " FROM $remoteEntityName WHERE $keys = '$id'"
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" message="Running sql query : #[payload]" doc:name="Log Query"/>
		<db:select doc:name="Select" config-ref="Database_Config">
			<ee:repeatable-file-store-iterable />
			<db:sql >#[payload]</db:sql>
		</db:select>
		<choice doc:name="Check Response" >
			<when expression="#[sizeOf(payload) == 0]" >
				<set-variable value="404" doc:name="Set HTTP Status" variableName="httpStatus"/>
				<set-payload value='{ "message": "Resource not found" }' doc:name="Set Payload"  mimeType="application/json"/>
			</when>
			<otherwise >
				<ee:transform doc:name="Build Response">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	entries: payload
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
			</otherwise>
		</choice>
    </flow>
    <flow name="get:\customers:mysql-example-api-config">
        <flow-ref doc:name="Flow Reference" name="inlineCount" target="inlineCount" targetValue="#[payload[0][0] as String]"/>
		<ee:transform doc:name="Build Query" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java

// This DataWeave generates a MySQL Select Query from your metadata

// APIkit Odata Service creates a variable that contains the fields of your entity. It's a list of string (List<String>)
var entityFields : Array<String> = vars.odata.fields match {
	case fields is Array<String> -> fields
	else -> []
}


// APIkit Odata Service creates a variable that contains the keys of your entity
var keys : String = vars.odata.keyNames match {
	case keyNames is String -> keyNames
	else -> ""
}

// APIkit Odata Service creates a variable that contains the table's name 
var remoteEntityName = vars.odata.remoteEntityName match {
	case remoteEntityName is String -> remoteEntityName
	else -> ""	
}



// Generate the fields you need in the query. 
// It checks for a select function in case you need less filters that you're actually exposing. 
// If there is no select present, it just returns your fields defined in your metadata
var generateSqlFields = (select) -> ((if (select != "" )( (select splitBy ",") -- (keys splitBy ",") ++ (keys splitBy ",")) else entityFields)  map "`$`" ) joinBy ", "


// Transform oDataFilters into MySQL Filters
var odataFilterToSQLFilter = (odataFilter) -> 
	  
	 odataFilter replace "eq null" with "is null" 
	 replace "ne null" with "is not null" 
	 replace " eq " with " = " 
	 replace " ne " with " != " 
	 replace " gt " with " > " 
	 replace " lt " with " < " 
	 replace " ge " with " >= " 
	 replace " le " with " <= " 
	 replace " and " with " AND " 
	 replace " or " with " OR " 



// APIkit Odata Service puts your oData filters into the queryParams
var filters = attributes.queryParams

var top : String = filters.top match {
    case top is String -> top
    else -> ""
} 

var skip : String = filters.skip match {
    case skip is String -> skip
    else -> ""
} 

var select : String = filters.select match {
	case select is String -> select
	else -> ""
}

var filter : String = filters.filter match {
	case filter is String -> filter
	else -> ""
}

var orderby : String = filters.orderby match {
	case orderby is String -> orderby
	else -> ""
}

// This function transforms your orderby oData filters into MySQL Order by format. 
// Transforms something like orderby=myField, ASC into ORDER BY myField, ASC
// If no orderby is present, it just returns an empty string
var toSQLOrderBy = (orderby ) -> if(orderby != "") (" ORDER BY " ++ (orderby replace "=" with " ")) else ""

// This function transforms your skip and top oData filters into MySQL LIMIT format. 
var toSQLSkipAndTop = (top, skip) -> if(top != "" and skip != "") " LIMIT $top OFFSET $skip" else if (top == "" and skip != "") " LIMIT 2147483647 OFFSET $skip" else if (top != "" and skip == "") " LIMIT $top"  else ""

// Generate the where part of your query.
var toSQLWhere = (odataFilter) -> if(odataFilter !=  "") " WHERE " ++ odataFilterToSQLFilter(odataFilter) else ""

---

"SELECT " ++ generateSqlFields(select) ++ " FROM $remoteEntityName"
 ++ ( 
 	(toSQLWhere(filter)) ++
 	(toSQLOrderBy(orderby)) ++
 	(toSQLSkipAndTop(top,skip))
 ) 
 
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" message="#[payload]" doc:name="Log Query"/>
		<db:select doc:name="Select" config-ref="Database_Config">
			<db:sql >#[payload]</db:sql>
		</db:select>
		<choice doc:name="Check Response" >
			<when  expression="#[sizeOf(payload) == 0]">
				<set-variable value="404" doc:name="Set HTTP Status" variableName="httpStatus" />
				<set-payload value='{ "message": "Resource not found" }' doc:name="Set Payload" mimeType="application/json" />
			</when>
			<otherwise >
				<ee:transform doc:name="Build Response" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	entries: payload
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
    </flow>
    <flow name="get:\orders:mysql-example-api-config">
		<ee:transform doc:name="Build Query" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java

// This DataWeave generates a MySQL Select Query from your metadata

// APIkit Odata Service creates a variable that contains the fields of your entity. It's a list of string (List<String>)
var entityFields : Array<String> = vars.odata.fields match {
	case fields is Array<String> -> fields
	else -> []
}


// APIkit Odata Service creates a variable that contains the keys of your entity
var keys : String = vars.odata.keyNames match {
	case keyNames is String -> keyNames
	else -> ""
}

// APIkit Odata Service creates a variable that contains the table's name 
var remoteEntityName = vars.odata.remoteEntityName match {
	case remoteEntityName is String -> remoteEntityName
	else -> ""	
}



// Generate the fields you need in the query. 
// It checks for a select function in case you need less filters that you're actually exposing. 
// If there is no select present, it just returns your fields defined in your metadata
var generateSqlFields = (select) -> ((if (select != "" )( (select splitBy ",") -- (keys splitBy ",") ++ (keys splitBy ",")) else entityFields)  map "`$`" ) joinBy ", "


// Transform oDataFilters into MySQL Filters
var odataFilterToSQLFilter = (odataFilter) -> 
	  
	 odataFilter replace "eq null" with "is null" 
	 replace "ne null" with "is not null" 
	 replace " eq " with " = " 
	 replace " ne " with " != " 
	 replace " gt " with " > " 
	 replace " lt " with " < " 
	 replace " ge " with " >= " 
	 replace " le " with " <= " 
	 replace " and " with " AND " 
	 replace " or " with " OR " 



// APIkit Odata Service puts your oData filters into the queryParams
var filters = attributes.queryParams

var top : String = filters.top match {
    case top is String -> top
    else -> ""
} 

var skip : String = filters.skip match {
    case skip is String -> skip
    else -> ""
} 

var select : String = filters.select match {
	case select is String -> select
	else -> ""
}

var filter : String = filters.filter match {
	case filter is String -> filter
	else -> ""
}

var orderby : String = filters.orderby match {
	case orderby is String -> orderby
	else -> ""
}

// This function transforms your orderby oData filters into MySQL Order by format. 
// Transforms something like orderby=myField, ASC into ORDER BY myField, ASC
// If no orderby is present, it just returns an empty string
var toSQLOrderBy = (orderby ) -> if(orderby != "") (" ORDER BY " ++ (orderby replace "=" with " ")) else ""

// This function transforms your skip and top oData filters into MySQL LIMIT format. 
var toSQLSkipAndTop = (top, skip) -> if(top != "" and skip != "") " LIMIT $top OFFSET $skip" else if (top == "" and skip != "") " LIMIT 2147483647 OFFSET $skip" else if (top != "" and skip == "") " LIMIT $top"  else ""

// Generate the where part of your query.
var toSQLWhere = (odataFilter) -> if(odataFilter !=  "") " WHERE " ++ odataFilterToSQLFilter(odataFilter) else ""

---

"SELECT " ++ generateSqlFields(select) ++ " FROM $remoteEntityName"
 ++ ( 
 	(toSQLWhere(filter)) ++
 	(toSQLOrderBy(orderby)) ++
 	(toSQLSkipAndTop(top,skip))
 ) 
 
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Log Query" message="#[payload]" />
		<db:select doc:name="Select" config-ref="Database_Config" >
			<db:sql >#[payload]</db:sql>
		</db:select>
		<ee:transform doc:name="Build Response" >
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	entries: payload
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
		<flow-ref doc:name="Get inlineCount" name="get:\orders\OrderID_(OrderID)-ShipName_(ShipName):mysql-example-api-config" target="inlineCount" targetValue="#[payload]"/>
		<logger level="INFO" doc:name="Logger" />
    </flow>
    <flow name="get:\orders\OrderID_(OrderID)-ShipName_(ShipName):mysql-example-api-config">
		<ee:transform doc:name="Build Query" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java


// APIkit Odata Service creates a variable that contains the fields of your entity. It's a list of string (List<String>)
var entityFields : Array<String> = vars.odata.fields match {
	case fields is Array<String> -> fields
	else -> []
}


// APIkit Odata Service creates a variable that contains the keys of your entity
var keys : String = vars.odata.keyNames match {
	case keyNames is String -> keyNames
	else -> ""
}

// APIkit Odata Service creates a variable that contains the table's name 
var remoteEntityName = vars.odata.remoteEntityName match {
	case remoteEntityName is String -> remoteEntityName
	else -> ""	
}


// APIkit Odata Service puts your oData filters into the queryParams
var filters = attributes.queryParams

var select : String = filters.select match {
	case select is String -> select
	else -> ""
}

var orderId = attributes.uriParams.OrderID match {
	case id is String -> id
	else -> ""	
}

var shipName = attributes.uriParams.ShipName match {
	case id is String -> id
	else -> ""	
}


// Generate the fields you need in the query. 
// It checks for a select function in case you need less filters that you're actually exposing. 
// If there is no select present, it just returns your fields defined in your metadata
var generateSqlFields = (select) -> ((if (select != "" )( (select splitBy ",") -- (keys splitBy ",") ++ (keys splitBy ",")) else entityFields)  map "`$`" ) joinBy ", "
---

"SELECT " ++ generateSqlFields(select) ++ " FROM $remoteEntityName WHERE OrderID = '$orderId' and  ShipName = '$shipName'"
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Log Query" message="Running sql query : #[payload]" />
		<db:select doc:name="Select" config-ref="Database_Config" >
			<ee:repeatable-file-store-iterable />
			<db:sql >#[payload]</db:sql>
		</db:select>
		<choice doc:name="Check Response" >
			<when expression="#[sizeOf(payload) == 0]" >
				<set-variable value="404" doc:name="Set HTTP Status" variableName="httpStatus" />
				<set-payload value='{ "message": "Resource not found" }' doc:name="Set Payload" mimeType="application/json" />
			</when>
			<otherwise >
				<ee:transform doc:name="Build Response" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	entries: payload
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
    </flow>
    <flow name="post:\customers:application\json:mysql-example-api-config">
		<set-variable value="#[payload.CustomerID]" doc:name="Set CustomerID" variableName="id"/>
		<ee:transform doc:name="Build Query" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
// This DataWeave generates a MySQL Insert Query from your payload and metadata

// APIkit Odata Service creates a variable that contains the table's name 
var remoteEntityName = vars.odata.remoteEntityName match {
	case remoteEntityName is String -> remoteEntityName
	else -> ""	
}

// Transform your payload into something like this: { myKey1: 'myValue1', myKey2: 'myValue2'}.
var valuesFromPayload = {
	keys: payload pluck $$,
	values: payload pluck "'$'"
}

// Then use joinBy to transform your keys and values into a CSV style
var columns = ( (valuesFromPayload.keys map "`$`" ) joinBy ", ") // myKey1, myKey2
var values = (valuesFromPayload.values joinBy ", ") // 'myValue1', 'myValue2'
---
// final expression is: INSERT INTO $remoteEntityName (myKey1, myKey2) VALUES ('myValue1', 'myValue2')
"INSERT INTO $remoteEntityName ($columns) VALUES ($values)" 
 

]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" message="SQL query: #[payload]" doc:name="Log Query"/>
		<db:insert doc:name="Insert" config-ref="Database_Config">
			<db:sql >#[payload]</db:sql>
		</db:insert>
		<ee:transform doc:name="Build Query" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java

// APIkit Odata Service creates a variable that contains the fields of your entity. It's a list of string (List<String>)
var entityFields : Array<String> = vars.odata.fields match {
	case fields is Array<String> -> fields
	else -> []
}

// APIkit Odata Service creates a variable that contains the table's name 
var remoteEntityName = vars.odata.remoteEntityName match {
	case remoteEntityName is String -> remoteEntityName
	else -> ""	
}


// This entity doesn't have an auto-generated PK so PK's value is in original payload.
var id = vars.id

---
"SELECT " ++ (entityFields joinBy ", ") ++ " FROM $remoteEntityName where CustomerID = '$id'"]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<db:select doc:name="Select" config-ref="Database_Config">
			<ee:repeatable-file-store-iterable />
			<db:sql >#[payload]
</db:sql>
		</db:select>
		<ee:transform doc:name="Build Response" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	entries: payload
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
    </flow>
    <flow name="post:\orders:application\json:mysql-example-api-config">
		<set-variable value="#[payload.ShipName]" doc:name="Set ShipName" variableName="shipName" />
		<set-variable value="#[payload.OrderID]" doc:name="Set OrderID" variableName="orderId" />
		<ee:transform doc:name="Build Query" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
// This DataWeave generates a MySQL Insert Query from your payload and metadata

// APIkit Odata Service creates a variable that contains the table's name 
var remoteEntityName = vars.odata.remoteEntityName match {
	case remoteEntityName is String -> remoteEntityName
	else -> ""	
}

// Transform your payload into something like this: { myKey1: 'myValue1', myKey2: 'myValue2'}.
var valuesFromPayload = {
	keys: payload pluck $$,
	values: payload pluck "'$'"
}

// Then use joinBy to transform your keys and values into a CSV style
var columns = ( (valuesFromPayload.keys map "`$`" ) joinBy ", ") // myKey1, myKey2
var values = (valuesFromPayload.values joinBy ", ") // 'myValue1', 'myValue2'
---
// final expression is: INSERT INTO $remoteEntityName (myKey1, myKey2) VALUES ('myValue1', 'myValue2')
"INSERT INTO $remoteEntityName ($columns) VALUES ($values)" 
 

]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Log Query" message="SQL query: #[payload]" />
		<db:insert doc:name="Insert" config-ref="Database_Config" >
			<db:sql >#[payload]</db:sql>
		</db:insert>
		<ee:transform doc:name="Build Query">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/java

// APIkit Odata Service creates a variable that contains the fields of your entity. It's a list of string (List<String>)
var entityFields : Array<String> = vars.odata.fields match {
	case fields is Array<String> -> fields
	else -> []
}

// APIkit Odata Service creates a variable that contains the table's name 
var remoteEntityName = vars.odata.remoteEntityName match {
	case remoteEntityName is String -> remoteEntityName
	else -> ""	
}

var orderId = vars.orderId



// This entity doesn't have an auto-generated PK so PK's value is in original payload.
var shipName = vars.shipName

---
"SELECT " ++ (entityFields joinBy ", ") ++ " FROM $remoteEntityName where OrderID = '$orderId' and ShipName = '$shipName'"
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<db:select doc:name="Select" config-ref="Database_Config" >
			<ee:repeatable-file-store-iterable />
			<db:sql >#[payload]
</db:sql>
		</db:select>
		<ee:transform doc:name="Build Response" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	entries: payload
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
    </flow>
	<sub-flow name="inlineCount" >
		<choice doc:name="Choice" >
			<when  expression='#[attributes.queryParams.inlinecount == "allpages"]'>
				<ee:transform doc:name="Transform Message" >
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/java

// This DataWeave generates a MySQL Select Query from your metadata

// APIkit Odata Service creates a variable that contains the table's name 
var remoteEntityName = vars.odata.remoteEntityName match {
	case remoteEntityName is String -> remoteEntityName
	else -> ""	
}

---

"SELECT count(*) FROM $remoteEntityName"
 
]]></ee:set-payload>
			</ee:message>		
		</ee:transform>
				<db:select doc:name="Select" config-ref="Database_Config">
					<db:sql >#[payload]</db:sql>
				</db:select>
			</when>
		</choice>
	</sub-flow>
</mule>
